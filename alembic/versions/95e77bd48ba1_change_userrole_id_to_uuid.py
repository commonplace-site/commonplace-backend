"""Change UserRole.id to UUID

Revision ID: 95e77bd48ba1
Revises: ee69b66c05ab
Create Date: 2025-05-13 16:15:04.901544

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '95e77bd48ba1'
down_revision: Union[str, None] = 'ee69b66c05ab'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop existing foreign key constraints
    op.execute("""
        DO $$ 
        BEGIN
            IF EXISTS (
                SELECT 1 
                FROM information_schema.table_constraints 
                WHERE constraint_name = 'role_permissions_permission_id_fkey' 
                AND table_name = 'role_permissions'
            ) THEN
                ALTER TABLE role_permissions DROP CONSTRAINT role_permissions_permission_id_fkey;
            END IF;
            
            IF EXISTS (
                SELECT 1 
                FROM information_schema.table_constraints 
                WHERE constraint_name = 'role_permissions_role_id_fkey' 
                AND table_name = 'role_permissions'
            ) THEN
                ALTER TABLE role_permissions DROP CONSTRAINT role_permissions_role_id_fkey;
            END IF;
            
            IF EXISTS (
                SELECT 1 
                FROM information_schema.table_constraints 
                WHERE constraint_name = 'user_roles_role_id_fkey' 
                AND table_name = 'user_roles'
            ) THEN
                ALTER TABLE user_roles DROP CONSTRAINT user_roles_role_id_fkey;
            END IF;
        END $$;
    """)
    
    # Change user_roles.id to UUID
    op.execute('ALTER TABLE user_roles ALTER COLUMN id TYPE UUID USING id::UUID')
    
    # Recreate foreign key constraints with CASCADE
    op.create_foreign_key(None, 'role_permissions', 'permissions', ['permission_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'role_permissions', 'roles', ['role_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'user_roles', 'roles', ['role_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop existing foreign key constraints
    op.execute("""
        DO $$ 
        BEGIN
            IF EXISTS (
                SELECT 1 
                FROM information_schema.table_constraints 
                WHERE constraint_name = 'role_permissions_permission_id_fkey' 
                AND table_name = 'role_permissions'
            ) THEN
                ALTER TABLE role_permissions DROP CONSTRAINT role_permissions_permission_id_fkey;
            END IF;
            
            IF EXISTS (
                SELECT 1 
                FROM information_schema.table_constraints 
                WHERE constraint_name = 'role_permissions_role_id_fkey' 
                AND table_name = 'role_permissions'
            ) THEN
                ALTER TABLE role_permissions DROP CONSTRAINT role_permissions_role_id_fkey;
            END IF;
            
            IF EXISTS (
                SELECT 1 
                FROM information_schema.table_constraints 
                WHERE constraint_name = 'user_roles_role_id_fkey' 
                AND table_name = 'user_roles'
            ) THEN
                ALTER TABLE user_roles DROP CONSTRAINT user_roles_role_id_fkey;
            END IF;
        END $$;
    """)
    
    # Change user_roles.id back to VARCHAR(36)
    op.execute('ALTER TABLE user_roles ALTER COLUMN id TYPE VARCHAR(36) USING id::VARCHAR(36)')
    
    # Recreate foreign key constraints
    op.create_foreign_key('role_permissions_permission_id_fkey', 'role_permissions', 'permissions', ['permission_id'], ['id'])
    op.create_foreign_key('role_permissions_role_id_fkey', 'role_permissions', 'roles', ['role_id'], ['id'])
    op.create_foreign_key('user_roles_role_id_fkey', 'user_roles', 'roles', ['role_id'], ['id'])
    # ### end Alembic commands ###
