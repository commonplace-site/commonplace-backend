"""add user_roles table

Revision ID: 3a50a88f2f70
Revises: b23928e081b6
Create Date: 2025-05-13 15:01:13.206724

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3a50a88f2f70'
down_revision: Union[str, None] = 'b23928e081b6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('arbitration',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('request_id', sa.String(length=36), nullable=True),
    sa.Column('content', sa.String(), nullable=False),
    sa.Column('context', sa.String(), nullable=False),
    sa.Column('model_source', sa.String(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('review_notes', sa.String(), nullable=True),
    sa.Column('arbitration_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('reviewed_by', sa.String(), nullable=True),
    sa.Column('reviewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_arbitration_request_id'), 'arbitration', ['request_id'], unique=True)
    op.create_table('chat_history',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('context', sa.String(length=50), nullable=False),
    sa.Column('model_source', sa.String(length=50), nullable=False),
    sa.Column('messages', sa.JSON(), nullable=False),
    sa.Column('chat_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_archived', sa.Integer(), nullable=True),
    sa.Column('last_message_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_chat_history_user_id'), 'chat_history', ['user_id'], unique=False)
    op.create_table('permissions',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('resource', sa.String(length=50), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('subai_logs',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('prompt', sa.String(), nullable=False),
    sa.Column('model', sa.String(length=50), nullable=False),
    sa.Column('response', sa.JSON(), nullable=False),
    sa.Column('subAi_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_subai_logs_user_id'), 'subai_logs', ['user_id'], unique=False)
    op.create_table('user_profiles',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('role', sa.Enum('ADMIN', 'TEACHER', 'STUDENT', 'DEVELOPER', 'MODERATOR', name='userrole'), nullable=False),
    sa.Column('preferences', sa.JSON(), nullable=True),
    sa.Column('learning_stats', sa.JSON(), nullable=True),
    sa.Column('meta_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_active', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_profiles_user_id'), 'user_profiles', ['user_id'], unique=True)
    op.create_table('codex_logs',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('context', sa.String(length=50), nullable=False),
    sa.Column('analysis', sa.JSON(), nullable=True),
    sa.Column('meta_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user_profiles.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('developer_logs',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.Column('meta_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user_profiles.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('language_test_audio',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('section', sa.String(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('topic', sa.String(), nullable=True),
    sa.Column('question_type', sa.String(), nullable=True),
    sa.Column('language_level', sa.String(), nullable=True),
    sa.Column('rubric_score', sa.Float(), nullable=True),
    sa.Column('file_path', sa.String(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('licenseKey',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('business_name', sa.String(), nullable=True),
    sa.Column('established_date', sa.Date(), nullable=True),
    sa.Column('renewal_due_date', sa.Date(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_licenseKey_id'), 'licenseKey', ['id'], unique=False)
    op.create_table('module_states',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('module_id', sa.String(length=36), nullable=False),
    sa.Column('state', sa.Enum('ACTIVE', 'INACTIVE', 'ARCHIVED', 'DRAFT', 'REVIEW', name='modulestate'), nullable=False),
    sa.Column('progress', sa.JSON(), nullable=True),
    sa.Column('meta_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_accessed', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user_profiles.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # First check and drop the foreign key constraint if it exists
    op.execute("""
        DO $$ 
        BEGIN
            IF EXISTS (
                SELECT 1 
                FROM information_schema.table_constraints 
                WHERE constraint_name = 'users_role_id_fkey' 
                AND table_name = 'users'
            ) THEN
                ALTER TABLE users DROP CONSTRAINT users_role_id_fkey;
            END IF;
        END $$;
    """)
    
    # We need to alter the roles table BEFORE creating role_permissions to avoid the type mismatch
    op.add_column('roles', sa.Column('description', sa.String(length=200), nullable=True))
    op.add_column('roles', sa.Column('level', sa.Integer(), server_default='1', nullable=False))
    op.add_column('roles', sa.Column('is_active', sa.Boolean(), server_default='true', nullable=True))
    
    # Drop the index if it exists
    op.execute("""
        DO $$ 
        BEGIN
            IF EXISTS (
                SELECT 1 
                FROM pg_indexes 
                WHERE indexname = 'ix_roles_id'
            ) THEN
                DROP INDEX ix_roles_id;
            END IF;
        END $$;
    """)
    
    # Alter the id column type
    op.execute('ALTER TABLE roles ALTER COLUMN id TYPE VARCHAR(36) USING id::VARCHAR(36)')
    
    op.alter_column('roles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('roles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    
    # Now create role_permissions with matching types
    op.create_table('role_permissions',
    sa.Column('role_id', sa.String(length=36), nullable=True),
    sa.Column('permission_id', sa.String(length=36), nullable=True),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], )
    )
    
    op.create_table('room_127_logs',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('context', sa.String(length=50), nullable=False),
    sa.Column('feedback', sa.JSON(), nullable=True),
    sa.Column('meta_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user_profiles.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tickets',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('status', sa.Enum('OPEN', 'IN_PROGRESS', 'REVIEW', 'RESOLVED', 'CLOSED', name='ticketstatus'), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='ticketpriority'), nullable=False),
    sa.Column('type', sa.Enum('BUG', 'FEATURE', 'ENHANCEMENT', 'DOCUMENTATION', 'SUPPORT', name='tickettype'), nullable=False),
    sa.Column('created_by', sa.String(length=36), nullable=False),
    sa.Column('assigned_to', sa.String(length=36), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('meta_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['assigned_to'], ['user_profiles.user_id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['user_profiles.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_consent',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('consent_given', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_roles',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.String(length=36), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('audit_logs',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('module_state_id', sa.String(length=36), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('actor_id', sa.String(length=36), nullable=False),
    sa.Column('changes', sa.JSON(), nullable=True),
    sa.Column('meta_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['module_state_id'], ['module_states.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ticket_comments',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('ticket_id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('meta_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user_profiles.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ticket_history',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('ticket_id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('changes', sa.JSON(), nullable=False),
    sa.Column('meta_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user_profiles.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('audio_files', sa.Column('topic', sa.String(length=100), nullable=True))
    op.add_column('audio_files', sa.Column('question_type', sa.String(length=50), nullable=True))
    op.add_column('audio_files', sa.Column('language_level', sa.String(length=100), nullable=True))
    op.add_column('audio_files', sa.Column('rubric_score', sa.Float(), nullable=True))
    op.add_column('audio_files', sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column('audio_files', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    op.add_column('comprehension_logs', sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column('comprehension_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    op.add_column('diagnostic_results', sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('diagnostic_results', sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('feedback_logs', sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column('feedback_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    op.add_column('files', sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('files', sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('files', 'uploaded_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.add_column('grammar_logs', sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column('grammar_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    op.add_column('integrations', sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column('integrations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    op.add_column('learning_modules', sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column('learning_modules', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    op.alter_column('lessons', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    op.alter_column('lessons', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    op.alter_column('profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    op.alter_column('profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    op.add_column('pronunciation_logs', sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column('pronunciation_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    op.add_column('roleplay_sessions', sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column('roleplay_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    op.alter_column('scraped_contents', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    op.drop_column('users', 'role_id')
    op.add_column('vocabulary_logs', sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('vocabulary_logs', sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column('vocabulary_logs', 'added_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    
    # Create default roles if they don't exist
    op.execute("""
        INSERT INTO roles (id, name, description, level, is_active, created_at, updated_at)
        SELECT 
            gen_random_uuid(),
            'USER',
            'Basic user role',
            1,
            true,
            CURRENT_TIMESTAMP,
            CURRENT_TIMESTAMP
        WHERE NOT EXISTS (
            SELECT 1 FROM roles WHERE name = 'USER'
        );
        
        INSERT INTO roles (id, name, description, level, is_active, created_at, updated_at)
        SELECT 
            gen_random_uuid(),
            'ADMIN',
            'Administrator role',
            10,
            true,
            CURRENT_TIMESTAMP,
            CURRENT_TIMESTAMP
        WHERE NOT EXISTS (
            SELECT 1 FROM roles WHERE name = 'ADMIN'
        );
    """)
    
    # Assign default role to existing users
    op.execute("""
        INSERT INTO user_roles (id, user_id, role_id, is_active, created_at, updated_at)
        SELECT 
            gen_random_uuid(),
            u.id,
            r.id,
            true,
            CURRENT_TIMESTAMP,
            CURRENT_TIMESTAMP
        FROM users u
        CROSS JOIN roles r
        WHERE r.name = 'USER'
        AND NOT EXISTS (
            SELECT 1 FROM user_roles ur 
            WHERE ur.user_id = u.id
        );
    """)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('vocabulary_logs', 'added_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.drop_column('vocabulary_logs', 'updated_at')
    op.drop_column('vocabulary_logs', 'created_at')
    op.add_column('users', sa.Column('role_id', sa.BIGINT(), autoincrement=False, nullable=True))
    op.create_foreign_key('users_role_id_fkey', 'users', 'roles', ['role_id'], ['id'])
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               existing_nullable=False)
    op.alter_column('scraped_contents', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index('ix_roles_id', 'roles', ['id'], unique=False)
    op.alter_column('roles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.alter_column('roles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('roles', 'id',
               existing_type=sa.String(length=36),
               server_default=sa.text("nextval('roles_id_seq'::regclass)"),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.drop_column('roles', 'is_active')
    op.drop_column('roles', 'level')
    op.drop_column('roles', 'description')
    op.alter_column('roleplay_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.drop_column('roleplay_sessions', 'updated_at')
    op.alter_column('pronunciation_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.drop_column('pronunciation_logs', 'updated_at')
    op.alter_column('profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.alter_column('profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.alter_column('lessons', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.alter_column('lessons', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.alter_column('learning_modules', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.drop_column('learning_modules', 'updated_at')
    op.alter_column('integrations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.drop_column('integrations', 'updated_at')
    op.alter_column('grammar_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.drop_column('grammar_logs', 'updated_at')
    op.alter_column('files', 'uploaded_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=True)
    op.drop_column('files', 'updated_at')
    op.drop_column('files', 'created_at')
    op.alter_column('feedback_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.drop_column('feedback_logs', 'updated_at')
    op.drop_column('diagnostic_results', 'updated_at')
    op.drop_column('diagnostic_results', 'created_at')
    op.alter_column('comprehension_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.drop_column('comprehension_logs', 'updated_at')
    op.alter_column('audio_files', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.drop_column('audio_files', 'updated_at')
    op.drop_column('audio_files', 'rubric_score')
    op.drop_column('audio_files', 'language_level')
    op.drop_column('audio_files', 'question_type')
    op.drop_column('audio_files', 'topic')
    op.drop_table('ticket_history')
    op.drop_table('ticket_comments')
    op.drop_table('audit_logs')
    op.drop_table('user_roles')
    op.drop_table('user_consent')
    op.drop_table('tickets')
    op.drop_table('room_127_logs')
    op.drop_table('role_permissions')
    op.drop_table('module_states')
    op.drop_index(op.f('ix_licenseKey_id'), table_name='licenseKey')
    op.drop_table('licenseKey')
    op.drop_table('language_test_audio')
    op.drop_table('developer_logs')
    op.drop_table('codex_logs')
    op.drop_index(op.f('ix_user_profiles_user_id'), table_name='user_profiles')
    op.drop_table('user_profiles')
    op.drop_index(op.f('ix_subai_logs_user_id'), table_name='subai_logs')
    op.drop_table('subai_logs')
    op.drop_table('permissions')
    op.drop_index(op.f('ix_chat_history_user_id'), table_name='chat_history')
    op.drop_table('chat_history')
    op.drop_index(op.f('ix_arbitration_request_id'), table_name='arbitration')
    op.drop_table('arbitration')
    # ### end Alembic commands ###
